const CACHE_NAME="offline";function updateCache(e,t){caches.open("offline").then((n=>{n.put(e,t)}))}function getNetworkResponse(e){return fetch(e).then((t=>(updateCache(e,t.clone()),t))).catch((()=>{throw new Error(`Network error fetching ${e.url}`)}))}function getAlternativeImage(e){return caches.open("offline").then((e=>e.matchAll())).then((t=>{const n=e.url.slice(0,e.url.lastIndexOf("-")+1),r=new RegExp(`${a=n,a.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&")}\\d+w\\.\\w{3,4}`);var a;return t.filter((e=>r.test(e.url))).reduce(((e,t)=>{const n=e=>e.headers.get("Content-Length");return n(e)>n(t)?e:t}))})).catch((()=>{throw new Error(`No alternative cache entry for ${e.url}`)}))}function getCacheResponse(e){return caches.match(e).then((t=>{const n="image"===e.destination,r=/-\d+w\.\w{3,4}$/.test(e.url);if(t)return t;if(n&&r)return getAlternativeImage(e);throw new Error(`No cache entry for ${e.url}`)}))}self.addEventListener("activate",(e=>{e.waitUntil(clients.claim())})),self.addEventListener("message",(e=>{"fillInitialCache"===e.data.command&&caches.open("offline").then((t=>{t.addAll(e.data.payload)}))})),self.addEventListener("fetch",(e=>{"GET"===e.request.method&&e.respondWith(getNetworkResponse(e.request).catch((()=>getCacheResponse(e.request))).catch((()=>new Response(null,{url:e.request.url,status:404,statusText:"Not found"}))))}));